library(rredlist)



iucn_amphibians=IUCN_for_WEGE()
sp_list=gbif_data_amphibia$species



ras=raster(ncol=84, nrow=77,extent(shp), resolution=1,crs=CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
iucn_shp=iucn_shapefile

problematic_species=c("Lepidochelys olivacea","Chelonia mydas","Caretta caretta","Eretmochelys imbricata","Eretmochelys imbricata","Dermochelys coriacea","Tetradactylus breyeri")




problematic_species=NA
IUCN_for_WEGE=function(sp_list,iucn_shp,ras,area_sf,status_from,problematic_species){
  sp_list=unique(sp_list) %>% na.omit(sp_list)
  
  library(rredlist)
  library(rgeos)
  
  if(any(problematic_species%in%sp_list)){
    print("removing problematic species from shp")    
    rem=which(iucn_shp@data[,"BINOMIAL"]%in%problematic_species)
    iucn_shapefile_subset=iucn_shp[-rem,]
  }
  
  
  new_names_list=intersect(iucn_shp@data$BINOMIAL,sp_list)
  iucn_shapefile_subset=iucn_shp[iucn_shapefile$BINOMIAL %in% new_names_list, ]
  print("subsetting iucn shapefile - completed")
  
  r2=ras
  values(r2)=1:ncell(r2)
  rpol=rasterToPolygons(r2)
  #area_sf=africa_shape
  area_spol=as(area_sf$geometry, 'Spatial')
  area_spol=spTransform(area_spol, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
  
  print("cropping raster")
  rpol_crop=crop(rpol,area_spol)
  
  
  print("cropping raster - completed")
  
  print("intersecting species with area")
  
  
  new_names_list=unique(iucn_shapefile_subset@data$BINOMIAL)
  vec_final=vector("list",length = length(new_names_list))
  k=1
  ###### loop to intersect each species by polygon
  for (k in seq_along(new_names_list)){
    organism <- new_names_list[[k]]
    cat('.... [', organism,'/',k, '/', length(new_names_list), ']\n',
        sep = '')
    
    
    IUCN_spec <- iucn_shapefile_subset[(iucn_shapefile_subset@data[,"BINOMIAL"]==organism),]
    #plot(IUCN_spec)
    if (nrow(IUCN_spec@data)==0){
      print(organism)
      vec_final[[k]]=0}
    
    else {
      
      IUCN_spec=gBuffer(IUCN_spec, width = 0)
      tryCatch({ sp_pol<- raster::intersect(IUCN_spec,rpol_crop)}, error=function(e){cat('ERROR :',conditionMessage(e), '\n')})
      #plot(IUCN_spec)
      vec_final[[k]]=sp_pol
    }
  }
  
  names(vec_final)=new_names_list
  ###### loop to add species names'column to lists
  print("intersecting species with area - completed")
  
  print("building final data.frame")
  k=1
  for (k in seq_along(new_names_list)){
    
    tryCatch({ vec_final[[k]]@data$species=names(vec_final[k])}, error=function(e){cat('ERROR :',conditionMessage(e), '\n')})
    
  }
  
  
  ############ loop to bind all lists into long df
  k=1
  vec_final_fixed=data.frame()
  for (k in seq_along(new_names_list)){
    
    
    
    tryCatch({vec_final_fixed=rbind(vec_final_fixed,vec_final[[k]]@data)}, error=function(e){cat('ERROR :',conditionMessage(e), '\n')})
    
    
  }
  
  vec_final_fixed
  
  crossing_dat<-vec_final_fixed
  
  # Getting coordinates from the raster centroids
  grid_coord<- gCentroid(rpol,byid=TRUE, id =rpol@data$layer)
  grid_coord<- as.data.frame(grid_coord@coords)
  grid_coord$layer<-rpol@data$layer
  head(grid_coord)
  
  crossing_dat$long <- grid_coord$x[match(crossing_dat$layer,grid_coord$layer)]
  
  crossing_dat$lat <- grid_coord$y[match(crossing_dat$layer,grid_coord$layer)]
  
  head(crossing_dat)
  
  
  if (status_from== "mammals"|status_from== "amphibians"|status_from== "birds") {
    print("downloading IUCN rank data")
    key_iucn="4f0c3034f11882fe7c77fdb1554d8b1240437ab2d068be2913dbb37a726e597d"
    list_rank=rl_comp_groups(status_from,key = key_iucn)
    rankdf=as.data.frame(list_rank)
    rankdf_prunned=rankdf[,c(3,7)]
    
    df_final=crossing_dat[,c(2,3,4)]
    colnames(df_final)=c('BINOMIAL',"longitude","latitude")
    
    df2=rankdf_prunned
    
    df_final$rank <- df2$result.category[match(df_final$BINOMIAL,df2$result.scientific_name)]
    
    colnames(df_final)=c("species", "longitude"   ,  "latitude"   ,   "status")
    
    
    df_final=df_final[complete.cases(df_final), ]
    
    
  }
  
  
  else {
    print("downloading reptile rank data")
    #######################################################
    download.file('https://www.dropbox.com/s/hftchhekbq15pqa/reptiles_tonini_status.csv?raw=1',
                  destfile = 'reps.csv')
    
    reps <- read.csv('reps.csv', skip = 2)
    reptiles_csv=reps
    reptiles_csv=reptiles_csv[,c(2,3)]
    colnames(reptiles_csv)=c('result.scientific_name','result.category')
    reptiles_csv$result.scientific_name <- sub(pattern = '_', replacement = ' ', x = reptiles_csv$result.scientific_name)
    df2=reptiles_csv
    
    df2$result.scientific_name=as.character(df2$result.scientific_name)
    df2$result.category=as.character(df2$result.category)
    df_final=crossing_dat[,c(2,3,4)]
    colnames(df_final)=c('BINOMIAL',"longitude","latitude")
    
    df_final=crossing_dat[,c(2,3,4)]
    colnames(df_final)=c('BINOMIAL',"longitude","latitude")
    df2
    
    
    df_final$rank <- df2$result.category[match(df_final$BINOMIAL,df2$result.scientific_name)]
    
    which(is.na(df_final$rank))
    
    colnames(df_final)=c("species", "longitude"   ,  "latitude"   ,   "status")
    
    
    df_final=df_final[complete.cases(df_final), ]
    
  }
}


